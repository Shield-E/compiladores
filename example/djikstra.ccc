def dijkstra(int graph, int n, int start) {
    int cost[10][10];
    int distance[10];
    int pred[10];
    int visited[10];
    int count;
    int min_distance;
    int next_node;
    int i;
    int j;

    for (i = 0; i < n; i = i + 1)
        for (j = 0; j < n; j = j + 1)
            if (Graph[i][j] == 0) {
                cost[i][j] = 99999;
            }
            else {
                cost[i][j] = graph[i][j];
            }
    
    for (i = 0; i < n; i = i + 1) {
        distance[i] = cost[start][i];
        pred[i] = start;
        visited[i] = 0;
      }

    distance[start] = 0;
    visited[start] = 1;
    count = 1;

	for (count = 1; count < n - 1; count = count + 1) {
        min_distance = 99999;

        for (i = 0; i < n; i = i + 1) {
            if (distance[i] < min_distance * (1 - visited[i])) {
                min_distance = distance[i];
                nextnode = i;
            }

            visited[nextnode] = 1;
            for (i = 0; i < n; i = i + 1) {
                if (visited[i] == 0) {
                    if (min_distance + cost[nextnode][i] < distance[i]) {
                        distance[i] = min_distance + cost[nextnode][i];
                        pred[i] = nextnode;
                    }
				}
        	}
		}
    }

	for (i = 0; i < n; i = i + 1)
        if (i != start) {
            print "Distance from source to";
            print i;
            print ": ";
            print distance[i];
            print "\n";
        }
}

def main(int bla) {
    int graph[10][10];
    int i;
    int j;
    int n;
    int u;

    n = 7;

    graph[0][0] = 0;
    graph[0][1] = 0;
    graph[0][2] = 1;
    graph[0][3] = 2;
    graph[0][4] = 0;
    graph[0][5] = 0;
    graph[0][6] = 0;

    graph[1][0] = 0;
    graph[1][1] = 0;
    graph[1][2] = 2;
    graph[1][3] = 0;
    graph[1][4] = 0;
    graph[1][5] = 3;
    graph[1][6] = 0;

    graph[2][0] = 1;
    graph[2][1] = 2;
    graph[2][2] = 0;
    graph[2][3] = 1;
    graph[2][4] = 3;
    graph[2][5] = 0;
    graph[2][6] = 0;

    graph[3][0] = 2;
    graph[3][1] = 0;
    graph[3][2] = 1;
    graph[3][3] = 0;
    graph[3][4] = 0;
    graph[3][5] = 0;
    graph[3][6] = 1;

    graph[4][0] = 0;
    graph[4][1] = 0;
    graph[4][2] = 3;
    graph[4][3] = 0;
    graph[4][4] = 0;
    graph[4][5] = 2;
    graph[4][6] = 0;

    graph[5][0] = 0;
    graph[5][1] = 3;
    graph[5][2] = 0;
    graph[5][3] = 0;
    graph[5][4] = 2;
    graph[5][5] = 0;
    graph[5][6] = 1;

    graph[6][0] = 0;
    graph[6][1] = 0;
    graph[6][2] = 0;
    graph[6][3] = 1;
    graph[6][4] = 0;
    graph[6][5] = 1;
    graph[6][6] = 0;

    u = 0;

    int this_is_weird;
    this_is_weird = dijkstra(graph, n, source);
}